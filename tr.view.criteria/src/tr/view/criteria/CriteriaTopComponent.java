/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can get a copy of the License at http://www.thinkingrock.com.au/cddl.html
 * or http://www.thinkingrock.com.au/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.thinkingrock.com.au/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * The Original Software is ThinkingRock. The Initial Developer of the Original
 * Software is Avente Pty Ltd, Australia.
 *
 * Portions Copyright 2006-2007 Avente Pty Ltd. All Rights Reserved.
 */

package tr.view.criteria;

import au.com.thinkingrock.tr.resource.Icons;
import java.awt.BorderLayout;
import java.util.logging.Logger;
import org.openide.util.HelpCtx;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponent;
import tr.model.Data;
import tr.model.DataLookup;
import tr.view.Window;

/**
 * Top component which displays something.
 */
public final class CriteriaTopComponent extends Window {
    
    public static final String PREFERRED_ID = "CriteriaTopComponent";

    private static final Logger LOG = Logger.getLogger("tr.view.criteria");

    private static CriteriaTopComponent instance;    

    private transient Lookup lookup;
    private transient Lookup.Result result;
    private transient CriteriaPanel panel;    
    
    private CriteriaTopComponent() {
        setName(NbBundle.getMessage(CriteriaTopComponent.class, "CTL_CriteriaTopComponent"));
        setToolTipText(NbBundle.getMessage(CriteriaTopComponent.class, "HINT_CriteriaTopComponent"));
        setIcon(Icons.Criteria.getImage());                    
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());

    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized CriteriaTopComponent getDefault() {
        if (instance == null) {
            instance = new CriteriaTopComponent();
        }
        return instance;
    }
    
    /**
     * Obtain the CriteriaTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized CriteriaTopComponent findInstance() {
//        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
//        if (win == null) {
//            ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find Criteria component. It will not be located properly in the window system.");
//            return getDefault();
//        }
//        if (win instanceof CriteriaTopComponent) {
//            return (CriteriaTopComponent)win;
//        }
//        ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }
    
    public int getPersistenceType() {
//        return TopComponent.PERSISTENCE_ALWAYS;
        return TopComponent.PERSISTENCE_NEVER;
    }
    
    public void componentOpened() {
        LOG.fine("Opened");        
        
        // initialise panel if necessary
        if (panel == null) {
            removeAll();
            panel = new CriteriaPanel();
            add(panel, BorderLayout.CENTER);
            super.revalidate();
            super.repaint();            
        }

        // data lookup listener to force panel initialisation if data changes
        if (result == null) {
            result = DataLookup.instance().lookup(new Lookup.Template(Data.class));
            result.addLookupListener(new LookupListener() {
                public void resultChanged(LookupEvent lookupEvent) {
                    LOG.fine("LookupListener for DataLookup - data has changed.");                
                    removeAll();
                    panel = null;
                }
            });
        }
    }
    
    public void componentClosed() {
        LOG.fine("Closed");        
    }
    
    public String preferredID() {
        return PREFERRED_ID;
    }
    
    
    /** Refreshes the window. */
    public void refresh() {
    }
    
    public Lookup getLookup() {
        if (panel == null) {
            return super.getLookup();
        }
        if (lookup == null) {
            lookup = Lookups.singleton(panel);  // Adder, Deleter
        }
        return lookup;
    }
    
    /** Finalise the window for close down. */
    public void deactivate() {
    }
    
    public HelpCtx getHelpCtx() {
        return new HelpCtx("tr.view.criteria");
    }
    
//    /** replaces this in object stream */
//    public Object writeReplace() {
//        return new ResolvableHelper();
//    }
//    
//    final static class ResolvableHelper implements Serializable {
//        private static final long serialVersionUID = 1L;
//        public Object readResolve() {
//            return CriteriaTopComponent.getDefault();
//        }
//    }

}
