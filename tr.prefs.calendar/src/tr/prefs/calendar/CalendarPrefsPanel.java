/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can get a copy of the License at http://www.thinkingrock.com.au/cddl.html
 * or http://www.thinkingrock.com.au/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.thinkingrock.com.au/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * The Original Software is ThinkingRock. The Initial Developer of the Original
 * Software is Avente Pty Ltd, Australia.
 *
 * Portions Copyright 2006-2007 Avente Pty Ltd. All Rights Reserved.
 */

package tr.prefs.calendar;

import java.util.List;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.SwingUtilities;
import org.openide.util.Lookup;

final class CalendarPrefsPanel extends javax.swing.JPanel {
    
    private final CalendarOptionsPanelController controller;
    
    CalendarPrefsPanel(CalendarOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        requiredCheckBox = new javax.swing.JCheckBox();
        doasapDueDateCheckBox = new javax.swing.JCheckBox();
        doasapNoDueDateCheckBox = new javax.swing.JCheckBox();
        delegatedCheckBox = new javax.swing.JCheckBox();
        scheduledCheckBox = new javax.swing.JCheckBox();
        synchronizerLabel = new javax.swing.JLabel();
        synchronizerComboBox = new javax.swing.JComboBox();
        synchronizerPanel = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        org.openide.awt.Mnemonics.setLocalizedText(requiredCheckBox, org.openide.util.NbBundle.getMessage(CalendarPrefsPanel.class, "CTL_Required")); // NOI18N
        requiredCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        requiredCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RequiredCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(doasapDueDateCheckBox, org.openide.util.NbBundle.getMessage(CalendarPrefsPanel.class, "doasap.due.date.checkbox")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(doasapNoDueDateCheckBox, org.openide.util.NbBundle.getMessage(CalendarPrefsPanel.class, "doasap.no.due.date.checkbox")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(delegatedCheckBox, org.openide.util.NbBundle.getMessage(CalendarPrefsPanel.class, "delegated.checkbox")); // NOI18N
        delegatedCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delegatedCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(scheduledCheckBox, org.openide.util.NbBundle.getMessage(CalendarPrefsPanel.class, "scheduled.checkbox")); // NOI18N

        synchronizerLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(synchronizerLabel, org.openide.util.NbBundle.getMessage(CalendarPrefsPanel.class, "CalendarPanel.importerLabel.text")); // NOI18N
        synchronizerLabel.setPreferredSize(new java.awt.Dimension(80, 23));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(requiredCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(37, 37, 37)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(doasapDueDateCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(scheduledCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(delegatedCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(layout.createSequentialGroup()
                        .add(doasapNoDueDateCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(0, 0, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(39, 39, 39)
                        .add(synchronizerLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(synchronizerComboBox, 0, 312, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(synchronizerPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(requiredCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(doasapDueDateCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(doasapNoDueDateCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(delegatedCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scheduledCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(synchronizerLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(synchronizerComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(synchronizerPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
        
    private void RequiredCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RequiredCheckBoxActionPerformed
        enableDisableFields();
        controller.changed();
    }//GEN-LAST:event_RequiredCheckBoxActionPerformed
    
    private void enableDisableFields() {
        scheduledCheckBox.setEnabled(requiredCheckBox.isSelected());
        delegatedCheckBox.setEnabled(requiredCheckBox.isSelected());
        doasapDueDateCheckBox.setEnabled(requiredCheckBox.isSelected());
        doasapNoDueDateCheckBox.setEnabled(requiredCheckBox.isSelected());
        synchronizerComboBox.setEnabled(requiredCheckBox.isSelected());        
    }
    
    
private void delegatedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delegatedCheckBoxActionPerformed

}//GEN-LAST:event_delegatedCheckBoxActionPerformed
    
    void load() {
        if (SwingUtilities.isEventDispatchThread()) {
            doLoad();
        } else {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    doLoad();
                }
            });
        }
    }
    
    private void doLoad() {
        requiredCheckBox.setSelected(CalendarPrefs.isICalendarRequired());
        
        Item selected = null;
        List<Item> synchronizers = new Vector<Item>();        
        synchronizers.add(noneItem);
        for (CalendarSynchronizer synchronizer : lookup.allInstances()) {
            Item item = new Item(synchronizer.getID(), synchronizer.getName());
            synchronizers.add(item);            
            if (synchronizer.getID().equals(CalendarPrefs.getSynchronizerID())) {
                selected = item;
            }                        
        }
        this.synchronizerComboBox.setModel(new DefaultComboBoxModel(synchronizers.toArray()));
        if (selected != null) {
            synchronizerComboBox.setSelectedItem(selectedImporter);
        } 
        
        
        enableDisableFields();
    }
    
    
    void store() {
        CalendarPrefs.setICalendarRequired(requiredCheckBox.isSelected());
        
        Item synchronizer = (Item)synchronizerComboBox.getSelectedItem();
        if (synchronizer == null || synchronizer == noneItem) {
            CalendarPrefs.setSynchronizerID("");
        } else {
            CalendarPrefs.setSynchronizerID(synchronizer.id);            
        }

        // TODO: save sync settings
        
    }
    
    boolean valid() {
        if (requiredCheckBox.isSelected()) {
            // TODO: return getSyncronizer().isValid();
        } else {
            return true;
        }        
    }
    
    
    
    private final class Item {
        final String id;
        final String name;        
        Item(String id, String name) {
            this.id = id;
            this.name = name;
        }
        @Override
        public String toString() {
            return name;
        }
        @Override
        public boolean equals(Object object) {
            if (object instanceof Item) {
                return id.equals(((Item)object).id);            
            } else {
                return false;
            }
        }
    }    
    
    private final Item noneItem = new Item("", "None");
    
    private final Lookup.Result<CalendarSynchronizer> lookup 
            = Lookup.getDefault().lookupResult(CalendarSynchronizer.class);
    
    
    
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox delegatedCheckBox;
    private javax.swing.JCheckBox doasapDueDateCheckBox;
    private javax.swing.JCheckBox doasapNoDueDateCheckBox;
    private javax.swing.JCheckBox requiredCheckBox;
    private javax.swing.JCheckBox scheduledCheckBox;
    private javax.swing.JComboBox synchronizerComboBox;
    private javax.swing.JLabel synchronizerLabel;
    private javax.swing.JPanel synchronizerPanel;
    // End of variables declaration//GEN-END:variables
    
}
